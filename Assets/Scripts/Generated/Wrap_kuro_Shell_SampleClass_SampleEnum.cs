// This file was automatically generated by kuroneko.
// ReSharper disable InconsistentNaming
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using kuro.Core;

namespace kuro.ReflectionTool
{
    public partial struct kuro_Shell_SampleClass_SampleEnum
    {

        /// <summary>
        /// <see cref="kuro.Shell+SampleClass+SampleEnum"/>
        /// </summary>
        public static Type __type__ { get; } = ReflectionUtils.GetTypeByFullName("Assembly-CSharp", "kuro.Shell+SampleClass+SampleEnum");


        public static kuro_Shell_SampleClass_SampleEnum None => new kuro_Shell_SampleClass_SampleEnum(__None);

        public static kuro_Shell_SampleClass_SampleEnum A => new kuro_Shell_SampleClass_SampleEnum(__A);

        public static kuro_Shell_SampleClass_SampleEnum B => new kuro_Shell_SampleClass_SampleEnum(__B);

        public static kuro_Shell_SampleClass_SampleEnum C => new kuro_Shell_SampleClass_SampleEnum(__C);

        public kuro_Shell_SampleClass_SampleEnum(object __self__) => this.__self__ = __self__ as object;
        public object __self__;
        public bool __valid__ => __self__ != null && __type__ != null;
        public System.Enum __super__ => (System.Enum)(__self__);
        public System.Enum __base__ => (System.Enum)(__self__);

        public int __int__() => __valid__ ? Convert.ToInt32(__self__) : 0;
        public static implicit operator int(kuro_Shell_SampleClass_SampleEnum self) => self.__int__();
        public static kuro_Shell_SampleClass_SampleEnum __int__(int value) => new(Enum.ToObject(__type__, value));
        public static implicit operator kuro_Shell_SampleClass_SampleEnum(int value) => __int__(value);

        public static bool operator == (kuro_Shell_SampleClass_SampleEnum a, kuro_Shell_SampleClass_SampleEnum b) => a.__int__() == b.__int__();
        public static bool operator != (kuro_Shell_SampleClass_SampleEnum a, kuro_Shell_SampleClass_SampleEnum b) => a.__int__() != b.__int__();
        public override bool Equals(object obj) => (obj is kuro_Shell_SampleClass_SampleEnum other && this == other) || (obj is Enum && obj.GetType() == __type__ && object.Equals(__self__, obj));
        public override int GetHashCode() => __valid__ ? __int__() : 0;

        public static kuro_Shell_SampleClass_SampleEnum operator & (kuro_Shell_SampleClass_SampleEnum a, kuro_Shell_SampleClass_SampleEnum b) => __int__(a.__int__() & b.__int__());
        public static kuro_Shell_SampleClass_SampleEnum operator | (kuro_Shell_SampleClass_SampleEnum a, kuro_Shell_SampleClass_SampleEnum b) => __int__(a.__int__() | b.__int__());
        public static kuro_Shell_SampleClass_SampleEnum operator ^ (kuro_Shell_SampleClass_SampleEnum a, kuro_Shell_SampleClass_SampleEnum b) => __int__(a.__int__() ^ b.__int__());
        public static kuro_Shell_SampleClass_SampleEnum operator ~ (kuro_Shell_SampleClass_SampleEnum a) => __int__(~a.__int__());
        public static kuro_Shell_SampleClass_SampleEnum operator << (kuro_Shell_SampleClass_SampleEnum a, int b) => __int__(a.__int__() << b);
        public static kuro_Shell_SampleClass_SampleEnum operator >> (kuro_Shell_SampleClass_SampleEnum a, int b) => __int__(a.__int__() >> b);

        private static object ___None;
        private static object __None => ___None ??= __type__.QF("None").GetValue(null);

        private static object ___A;
        private static object __A => ___A ??= __type__.QF("A").GetValue(null);

        private static object ___B;
        private static object __B => ___B ??= __type__.QF("B").GetValue(null);

        private static object ___C;
        private static object __C => ___C ??= __type__.QF("C").GetValue(null);
    }
}
