// This file was automatically generated by kuroneko.
// ReSharper disable InconsistentNaming
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using kuro.Core;

namespace kuro.ReflectionTool
{
    public partial struct kuro_Shell_SampleClass
    {

        /// <summary>
        /// <see cref="kuro.Shell+SampleClass"/>
        /// </summary>
        public static Type __type__ { get; } = ReflectionUtils.GetTypeByFullName("Assembly-CSharp", "kuro.Shell+SampleClass");

        public delegate int SampleDelegate(int value);

        public static kuro_Shell_SampleClass s_instance
        {
            get => new kuro_Shell_SampleClass(__s_instance.GetValue(null));
            set => __s_instance.SetValue(null, value.__self__);
        }

        public int Value
        {
            get => __Get__Value(__self__);
            set => __Set__Value(__self__, value);
        }

        public int _value
        {
            get => __Get___value(__self__);
            set => __Set___value(__self__, value);
        }

        public kuro_Shell_SampleClass_SampleEnum _enum
        {
            get => new kuro_Shell_SampleClass_SampleEnum(___enum.GetValue(__self__));
            set => ___enum.SetValue(__self__, value.__self__);
        }

        public System.Collections.IList _list
        {
            get => (System.Collections.IList)(___list.GetValue(__self__));
            set => ___list.SetValue(__self__, value);
        }

        public kuro_Shell_SampleClass _list__GetItem(int i) => new kuro_Shell_SampleClass(_list?[i]);
        public void _list__SetItem(int i, kuro_Shell_SampleClass value)
        {
            var __list__ = _list;
            if (__list__ == null) return;
            __list__[i] = value.__self__;
        }

        public SampleDelegate OnSampleEvent
        {
            get => (__OnSampleEvent.GetValue(__self__) as Delegate)?.Cast<SampleDelegate>();
            set => __OnSampleEvent.SetValue(__self__, value?.Cast(__OnSampleEvent.FieldType));
        }

        public int InvokeDelegate(int value)
        {
            var __pool__ = FixedArrayPool<object>.Shared(1);
            var __params__ = __pool__.Rent();
            __params__[0] = value;
            var __result__ = __InvokeDelegate?.Invoke(__self__, __params__);
            __pool__.Return(__params__);
            return __result__ != null ? (int)(__result__) : default;
        }

        public kuro_Shell_SampleClass(object __self__) => this.__self__ = __self__ as object;
        public object __self__;
        public bool __valid__ => __self__ != null && __type__ != null;
        public kuro_Shell_BaseClass __super__ => new kuro_Shell_BaseClass(__self__);
        public object __base__ => (object)(__self__);

        public static kuro_Shell_SampleClass __new__()
        {
            return new(Activator.CreateInstance(__type__));
        }

        public static kuro_Shell_SampleClass __new__(int value)
        {
            var __pool__ = FixedArrayPool<object>.Shared(1);
            var __params__ = __pool__.Rent();
            __params__[0] = value;
            var __result__ = Activator.CreateInstance(__type__, __params__);
            __pool__.Return(__params__);
            return new(__result__);
        }

        private static Func<object, int> ___Get___value;
        private static Func<object, int> __Get___value => ___Get___value ??= (__type__.QF("_value")).ILGet<int>();
        private static Action<object, int> ___Set___value;
        private static Action<object, int> __Set___value => ___Set___value ??= (__type__.QF("_value")).ILSet<int>();

        private static FieldInfo ____enum;
        private static FieldInfo ___enum => ____enum ??= __type__?.QF("_enum");

        private static FieldInfo ____list;
        private static FieldInfo ___list => ____list ??= __type__?.QF("_list");

        private static Type ___E___list;
        public static Type __E___list => ___E___list ??= ReflectionUtils.GetTypeByFullName("Assembly-CSharp", "kuro.Shell+SampleClass");

        private static FieldInfo ___OnSampleEvent;
        private static FieldInfo __OnSampleEvent => ___OnSampleEvent ??= __type__?.QF("OnSampleEvent");

        private static PropertyInfo ___s_instance;
        private static PropertyInfo __s_instance => ___s_instance ??= __type__?.QP("s_instance");

        private static Func<object, int> ___Get__Value;
        private static Func<object, int> __Get__Value => ___Get__Value ??= (__type__.QP("Value")).ILGet<int>();
        private static Action<object, int> ___Set__Value;
        private static Action<object, int> __Set__Value => ___Set__Value ??= (__type__.QP("Value")).ILSet<int>();

        private static MethodInfo ___InvokeDelegate;
        private static MethodInfo __InvokeDelegate => ___InvokeDelegate ??= __type__.QM("InvokeDelegate", "System.Int32");
    }
}
